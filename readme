# Flamingo Bingo, by Tim Andes

## Why?
Built to assess my performance in AWS, web development, and IaC.
## What?
In this game, bingo players REGISTER, receive a RANDOMLY generated 3x3 bingo card, and PLAY by submitting the world regions where they spot flamingos in the wild.
## Where?
- AWS for backend: API, user, game state tracking(?)
- Web for frontend: HTML, CSS, JS(? I don't think a live refresh is needed on card interaction)
## How?
- I don't see myself completing this within 2-4 hours without AI assistance, etc. Will either work to completion (est 8-12 hrs) or stop at 4 hours of work.
- Only need back end on AWS framework: DynamoDB <-> Lambda <-> API Gateway

# TO DO
## Overall:
[] set up AWS account with [X] zero spend budget, [x] alt contacts, [x] admin user, [x] login as admin, [x] create CLI keys
[] add AWS account keys to local machine
[] set up 2 GitHub repos (separate front end (fe) and back end (be)?)

## Back End:
[] API needs to return the provided JSON (they need to be able to access via CURL or API endpoint) HTTP...
- POST create player and card and add to DDB
- POST submit region of flamingo sighting
- GET updated card to re-render on refresh
[] make sure API endpoint is easy access on interviewer side

## Front end:
player does the following in a web-based UI:
- On page load... register form via input() (register, then POST to DB player and card, then redirect to card)
- received a randomly generated bingo card (class Card(), created by API JSON data)
- plays by clicking on / submitting the World Region where they spot a flamingo (AKA they can select and submit, or just click on a square on the card)

## Resources:
- https://www.youtube.com/watch?v=jTi18CNqObA - a video on building an AWS bingo game to get an idea of someone else's architecture

## Game Plan (Terraform in mind...)
[x] 1, watch the above video in case it sheds light on any key roadblocks
- 2, whiteboard, then pseudocode
- 3, once full plan is drafted create AWS account and GH connection
- 4, review docs update architecture/pseudocode/docstrings
- 5+ Back end: User creation, Generate Card, Interact with Card, update UI on refresh 
- 6+ Front End. On load, form pops for new player. Then submit form, then redirect to card, then interact with card, refresh for updated card


## Initial thoughts (5/21 3:04pm - Estimated time to complete 2-4 hours):
I expect this project, if taken to completion of minimum specs, to take 8-12 hours. Many different ways to accomplish the same task. I could spend 4 hours
planning and researching before even starting to code! I was asked during the interview if I knew how to use any coding copilots, I said yes. I am taking
this information and deducing that I am permitted to use any AI coding assistants required. This should enable me to keep the time to completion around 4 hours.
I am assuming that the goal is to get the job done, not write all of the code by hand.

Question: Do I limit my efforts to 4 hours of elapsed time, or do I spend the time until I meet all specs?

# Details
- Admin Sign-In URL: https://891377128523.signin.aws.amazon.com/console
- Admin User: ia-admin
- AWS CLI Profile: ia-admin
